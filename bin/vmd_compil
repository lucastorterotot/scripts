#!/bin/bash

vmdresolution=1024

ext_to_convert_mol2="cml mol"
ext_to_convert_xyz="mol2 gzmat gamin"

for arg in "$@"; do
    directory=$(dirname $arg)
    argnoext=${arg%.*}
    file=$(basename $argnoext)
    extension=${arg#$argnoext.}
    extension_to_use=$extension
    
    tmp_script_name='tmp_vmd_script_for_'$file'.vmd'

    if [[ $ext_to_convert_mol2 == *$extension* ]]; then
        babel $arg $argnoext.mol2
        babel $arg $argnoext.xyz
        extension_to_use="xyz"
    elif [[ $ext_to_convert_xyz == *$extension* ]]; then
        babel $arg $argnoext.xyz
        extension_to_use="xyz"
    fi

    if [ -e $argnoext.vmd ]; then
        cat $argnoext.vmd > $tmp_script_name
    elif [ -e $argnoext.$extension_to_use ]; then
        cat $lt_scripts_dir/vmd_files/visualization_state_to_use.vmd > $tmp_script_name
        oldxyzfile=$(grep -h 'mol new .*xyz' $tmp_script_name | grep -o '.* type' | grep -o '.*xyz' | grep -o '/.*')
        currentdir=$(pwd) ; cd $directory ; newxyzfile=$(pwd) ; cd $currentdir
        newxyzfile=$newxyzfile'/'$file'.'$extension_to_use
        sed -i "s|$oldxyzfile|$newxyzfile|g" $tmp_script_name
        oldxyzfile=$(basename $oldxyzfile) ; newxyzfile=$(basename $newxyzfile)
        sed -i "s|$oldxyzfile|$newxyzfile|g" $tmp_script_name
        sed -i "s|xyz|$extension_to_use|g" $tmp_script_name
    fi

    if [ -e $argnoext.mol2 ]; then
        # sed -i "s|autobonds 1|autobonds 0|g" $tmp_script_name
        echo "mol new $argnoext.mol2 type mol2 first 0 last -1 step 1 filebonds 1 autobonds 1 waitfor all" >> $tmp_script_name
        cat $lt_scripts_dir/vmd_files/mol2_files_addition_for_multiple_bonds.txt >> $tmp_script_name
    fi
    
    if [ -e $directory/common-vmdsuffix.txt ]; then
        cat $directory/common-vmdsuffix.txt >> $tmp_script_name
    elif [ -e $directory/$file-vmdsuffix.txt ]; then
        cat $directory/$file-vmdsuffix.txt >> $tmp_script_name
    fi
    
    if [ -e ~/VMD_1_9_3/usr/local/lib/vmd/tachyon_LINUXAMD64 ]; then
        render='~/VMD_1_9_3/usr/local/lib/vmd/tachyon_LINUXAMD64'
    else
        render='/usr/local/lib/vmd/tachyon_LINUXAMD64'
    fi
    
    echo 'render Tachyon vmdscene "'$render'" -aasamples 12 %s -format TARGA -o %s.tga -res '$vmdresolution' '$vmdresolution >> $tmp_script_name
    
    vmd -dispdev none -eofexit < $tmp_script_name
    
    convert vmdscene.tga $file'-vmdrender.png'
    rm vmdscene* &
    rm $tmp_script_name &

    if [[ $ext_to_convert_mol2 == *$extension* ]]; then
        rm $argnoext.mol2 $argnoext.xyz
    elif [[ $ext_to_convert_xyz == *$extension* ]]; then
        rm $argnoext.xyz
    fi &
    
    wait
done

    
